{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def welcome():\n",
    "    runtime = 1\n",
    "    YourName = input(\"Kindly enter your name: \")\n",
    "    print(\"Dear \",YourName, \"Welcome to our Demy's Tecnology,\") \n",
    "    while runtime:\n",
    "        checker = int(input(\"Enter 1 to sumbit a complaint, or 2 to quit: \"))\n",
    "        if checker == 1:\n",
    "            name = input(\"Please enter your name: \")\n",
    "            complaint = input(\"Please submit your complaint: \")\n",
    "            date = datetime.date(datetime.now())\n",
    "            print(\"Your complaints has been recorded at ,\", date,  \"we can get back to you soon!\")\n",
    "            print('==========================')\n",
    "            userComplaints[name] = {complaint}\n",
    "        elif checker == 2:\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid value, Enter 1 to sumbit a complaint, or 2 to quit:\") \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "welcome()\n",
    "print(userComplaints)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "name = input(\"Please enter your name: \")\n",
    "if name in userComplaints:\n",
    "    print(userComplaints[name])\n",
    "else: \n",
    "    print(\"This complaint is not in the system\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from urllib.parse import quote"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def detectLangauge(text):\n",
    "    url = \"https://google-translate1.p.rapidapi.com/language/translate/v2/detect\"\n",
    "    payload = \"q=\" + quote(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "headers = {\n",
    "    'content-type': \"application/x-www-form-urlencoded\",\n",
    "    'accept-encoding': \"application/gzip\",\n",
    "    'x-rapidapi-key': \"6464df7f3dmsh79109d96d292f30p1d2e4cjsn32767b241ca1\",\n",
    "    'x-rapidapi-host': \"google-translate1.p.rapidapi.com\"\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    " response = requests.request(\"POST\", url, data=payload, headers=headers)\n",
    "    \n",
    "    return(response.text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from urllib.parse import quote"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def translateComplaint(text, target_language):\n",
    "\n",
    "    source_language = detectLangauge(text)\n",
    "    url = \"https://google-translate1.p.rapidapi.com/language/translate/v2\"\n",
    "    payload = \"q=\" + quote(text) + \"&target=\" + target_language + \"&source=\" + source_language"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "headers = {\n",
    "    'content-type': \"application/x-www-form-urlencoded\",\n",
    "    'accept-encoding': \"application/gzip\",\n",
    "    'x-rapidapi-key': \"6464df7f3dmsh79109d96d292f30p1d2e4cjsn32767b241ca1\",\n",
    "    'x-rapidapi-host': \"google-translate1.p.rapidapi.com\"\n",
    "    }\n",
    "    response = requests.request(\"POST\", url, data=payload, headers=headers)\n",
    "\n",
    "    return response.text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "name = input(\"Please enter your name:\")\n",
    "if name in userComplaints:\n",
    "    complain_string = list(userComplaints[name])[0]\n",
    "    translated_object = json.loads(translateComplaint(complain_string, \"en\"))\n",
    "    translation = translated_object[\"data\"][\"translations\"][0][\"translatedText\"]\n",
    "    print(translation)\n",
    "else:\n",
    "    print(\"This complaint is not in the system\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "complaints_json = json.loads('{\"data\":{\"detections\":[[{\"language\":\"en\",\"isReliable\":false,\"confidence\":0.8180167078971863}]]}}')\n",
    "complaints_json[\"data\"][\"detections\"][0][0][\"language\"] "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
